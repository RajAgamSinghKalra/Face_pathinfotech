#!/usr/bin/env python3
# 02_5_embedding_test_fixed2.py
# ------------------------------------------------------------
# Verify that a stored face embedding is bit-for-bit correct
# ------------------------------------------------------------

import sys, cv2, numpy as np, oracledb

# ── Oracle client (thick if available) ───────────────────────
try:
    oracledb.init_oracle_client()
except Exception:
    # thin mode needs cryptography
    import cryptography  # noqa: F401

conn = oracledb.connect(user="system",
                        password="1123",
                        dsn="localhost:1521/FREEPDB1")
cur  = conn.cursor()

ROW_ID = 1
cur.execute("""
    SELECT embedding_blob, cropped_face_path
    FROM   faces
    WHERE  id = :1
""", [ROW_ID])
blob, img_path = cur.fetchone()

vec_db = np.frombuffer(blob.read(), dtype="<f4")
print("DB vector:", vec_db.shape, " ‖v‖ =", np.linalg.norm(vec_db))

# ── ArcFace re-embed ─────────────────────────────────────────
from insightface.model_zoo import get_model
model = get_model("buffalo_l"); model.prepare(ctx_id=-1)      # CPU

img = cv2.imread(img_path)
if img is None:
    sys.exit(f"Could not read {img_path}")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img = cv2.resize(img, (112, 112))

vec_new = model.get_feat(img).astype(np.float32).flatten()    # <-- FIX
vec_new /= np.linalg.norm(vec_new)
print("New vector:", vec_new.shape, " ‖v‖ =", np.linalg.norm(vec_new))

# ── Cosine similarity ───────────────────────────────────────
cos = float(np.dot(vec_db, vec_new))
print(f"cosine(db , recomputed) = {cos:.6f}")

if cos >= 0.98:
    print("✅  Stored embedding matches the model output — pipeline is correct.")
else:
    print("⚠️  Cosine < 0.98 — investigate byte-order or normalisation.")
